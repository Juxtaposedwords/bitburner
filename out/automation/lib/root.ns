export async function root(ns, target) {
    return basicRoot(ns,target,false)
}
export async function safeRoot(ns, target) {
    return basicRoot(ns,target,true)
}
/** @param {import("../../..").NS } ns */
function basicRoot(ns, target,safe){

    const cracks = [
        ["FTPCrack.exe", ns.ftpcrack],
        ["BruteSSH.exe", ns.brutessh],
        ["HTTPWorm.exe", ns.httpworm],
        ["relaySMTP.exe", ns.relaysmtp],
        ["SQLInject.exe", ns.sqlinject],
    ]
    

    let ports = 0;
    for (const c of cracks) {
        if (ns.fileExists(c[0], "home")) {
            c[1](target);
            ports++;
        }
    }
    const needed = ns.getServerNumPortsRequired(target)
    if (ports < needed) {
        ns.tprint("WARN: Not enough ports opened for target " + target + "; needed " + needed, ", got " + ports + ".");
    } else if (ns.hasRootAccess(target)==true) {
        ns.tprintf("INFO: skiping rooting %s as is already rooted",target)
    } else if ((safe==true) && (ns.getHackingLevel()< ns.getServerRequiredHackingLevel(target))){
        ns.tprinf("INFO: skipping rooting %s as %d is higher than current hacking level (%d)",0, ns.getHackingLevel())
    } else { 
        ns.nuke(target);
        if (!(ns.hasRootAccess(target) == true )){
            ns.tprintf("Error: Failed to nuke target: %s",target)
        }
    }
    return ns.hasRootAccess(target)
}